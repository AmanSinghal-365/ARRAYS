2 DIMENSIONAL ARRAY
JUST LIKE A GRID WITH MULTIPLE ROWS AND COLUMNS...LIKE TABLE OR SPREADSHEET...
THIS IS BASICALLY AN IMAGINATION...
ACTUALLY, IN MEMORY, IT STORES AS A 1D ARRAY...
IT IS STORED ROW BY ROW WISE...

W H Y ?
CREATING 10000 ARRAYS TO CREATE A GRID OF 10000*10000 ELEMENTS IS SENSELESS...

   C0  C1  C2
R0  -   -   -
R1  -   -   -
R2  -   -   -

EXAMPLE::
1 2 3
4 5 6
7 8 9
IN MEMORY IT IS LIKE 1 2 3 4 5 6 7 8 9
TO ACCESS THE INDEX OF THE MEMORY ARRAY... WECAN USE c*i+j;
c = total columns
i = row number
j = column number

DECLARATION::
datatype <array name>[row number][column number];
BY DEFAULT, WE TAKE i and j....int a[i][j];
EXAMPLE:: int a[3][3];

ACCESSING AN ELEMENT:: ARRAY a::
INDEXING IS REQUIRED...TO ACCESS INDIVIDUAL ELEMENTS...
1 2 3
4 5 6
7 8 9
a[0][2] = 3
a[1][1] = 5

IF WE HAD AN 2D ARRAY WITH N ROWS AND M COLUMNS
INDEX... 0 - N-1
         0 - M-1

ROW WISE ACCESS:::
1 2 3    4 5 6    7 8 9
COLUMN WISE ACCESS::
1 4 7    2 5 8    3 6 9

MULTI-DIMENSIONAL ARRAYS AND FUNCTIONS::
WE CAN'T LEAVE THE BRACKET OF THE SECOND PARAMETER EMPTY...
void sum(int a[][])
{  ]          THIS IS WRONGGG
FIRST CAN BE EMPTY...
SECOND AND FURTHER CAN'T BE...

---------------------------------------------------------------------------------
CODING VS CODE:::
---------------------------------------------------------------------------------

#include<iostream>
using namespace std;

int main()
{
    //DECLARING AN ARRAY
    int a[3][3];

    //INITIALISATION
    int b[3][3]={{1,2,3},{4,5,6},{7,8,9}};
    //1 2 3
    //4 5 6
    //7 8 9
    cout<<b[2][2]<<endl;
    
    //PRINTING ROW WISE
    cout<<"ROW-WISE PRINT"<<endl;
    for(int r=0;r<3;r++)
    {
        for(int c=0;c<3;c++)
        {
            cout<<b[r][c]<<" ";
        }
    }
    cout<<endl;
    //PRINTING COLUMN WISE
    cout<<"COLUMN-WISE PRINT"<<endl;
    for(int r=0;r<3;r++)
    {
        for(int c=0;c<3;c++)
        {
            cout<<b[c][r]<<" ";
        }
    }
    cout<<endl;
    
    int d[3][3];
    //TAKING INPUT
    cout<<"ENTER ARRAY : "<<endl;

    for(int r=0;r<3;r++)
    {
        for(int c=0;c<3;c++)
        {
            cin>>d[r][c];
        }
    }

    //PRINTING ARRAY
    cout<<"ROW WISE ARRAY IS : "<<endl;
    for(int r=0;r<3;r++)
    {
        for(int c=0;c<3;c++)
        {
            cout<<d[r][c]<<" ";
        }
        cout<<endl;
    }

    //PRINTING ARRAY
    cout<<"COLUMN WISE ARRAY IS : "<<endl;
    for(int r=0;r<3;r++)
    {
        for(int c=0;c<3;c++)
        {
            cout<<d[c][r]<<" ";
        }
        cout<<endl;
    }
}
--------------------------------------------------------------------------------------
OUTPUT:
---------------------------------------------------------------------------------------
9
ROW-WISE PRINT
1 2 3 4 5 6 7 8 9 
COLUMN-WISE PRINT
1 4 7 2 5 8 3 6 9 
ENTER ARRAY : 
1 2 3
4 5 6
7 8 9
ROW WISE ARRAY IS :
1 2 3
4 5 6
7 8 9
COLUMN WISE ARRAY IS :
1 4 7
2 5 8
3 6 9
-----------------------------------------------------------------------------------------



